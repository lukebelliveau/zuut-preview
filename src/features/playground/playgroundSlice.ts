import { createSlice } from '@reduxjs/toolkit';
// import { RootState, AppThunk } from '../../app/store';

export interface CounterState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: CounterState = {
  value: 0,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
export const playgroundSlice = createSlice({
  name: 'playground',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // foo: (state) => {
    //   state.foo += 1;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
    // builder
      // .addCase(incrementAsync.pending, (state) => {
      //   state.status = 'loading';
      // })
      // .addCase(incrementAsync.fulfilled, (state, action) => {
      //   state.status = 'idle';
      //   state.value += action.payload;
      // });
  // },
});

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;


export default playgroundSlice.reducer;
